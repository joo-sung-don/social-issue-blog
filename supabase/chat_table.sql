-- 채팅 메시지를 저장할 테이블 생성
CREATE TABLE IF NOT EXISTS public.chat_messages (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  issue_slug TEXT NOT NULL,
  sender_name TEXT NOT NULL,
  message TEXT NOT NULL,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  
  -- 추가 메타데이터
  is_system_message BOOLEAN DEFAULT FALSE,
  sender_id UUID REFERENCES auth.users(id), -- 나중에 회원 시스템 연동을 위한 필드 (현재는 NULL 허용)
  ip_address TEXT  -- 익명 사용자 식별 및 스팸 방지용
);

-- Supabase Realtime 기능을 위한 설정
-- 대신 Supabase Dashboard에서 Table Editor > chat_messages 테이블 > Realtime > Full 선택
-- 아래 주석 처리된 명령어는 참고용 (Supabase에서는 대시보드를 통해 설정해야 함)
-- ALTER TABLE public.chat_messages REPLICA IDENTITY FULL;

-- 인덱스 생성
CREATE INDEX IF NOT EXISTS chat_messages_issue_slug_idx ON public.chat_messages(issue_slug);
CREATE INDEX IF NOT EXISTS chat_messages_created_at_idx ON public.chat_messages(created_at);

-- 퍼블릭 접근을 위한 RLS(Row Level Security) 정책 설정
ALTER TABLE public.chat_messages ENABLE ROW LEVEL SECURITY;

-- 익명 사용자도 메시지를 읽을 수 있게 허용
CREATE POLICY "Anyone can read chat messages" 
ON public.chat_messages FOR SELECT 
USING (true);

-- 익명 사용자도 메시지를 작성할 수 있게 허용 (단, 시스템 메시지는 작성 불가)
CREATE POLICY "Anyone can insert non-system messages" 
ON public.chat_messages FOR INSERT 
WITH CHECK (is_system_message = false);

-- 시스템 메시지는 인증된 사용자만 작성 가능
CREATE POLICY "Only authenticated users can insert system messages" 
ON public.chat_messages FOR INSERT 
WITH CHECK (
  auth.role() = 'authenticated' AND is_system_message = true
);

-- 자신이 작성한 메시지만 삭제 가능 (로그인한 사용자용)
CREATE POLICY "Authenticated users can delete their own messages" 
ON public.chat_messages FOR DELETE 
USING (
  auth.role() = 'authenticated' AND sender_id = auth.uid()
);

-- 익명 사용자는 메시지를 삭제할 수 없음 (나중에 특별 인증 토큰 구현 가능)

-- 함수: 새 채팅 메시지가 추가될 때 알림
CREATE OR REPLACE FUNCTION notify_chat_message()
RETURNS TRIGGER AS $$
BEGIN
  PERFORM pg_notify(
    'chat_message_inserted',
    json_build_object(
      'issue_slug', NEW.issue_slug,
      'id', NEW.id,
      'sender_name', NEW.sender_name,
      'created_at', NEW.created_at
    )::text
  );
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- 트리거 생성
DROP TRIGGER IF EXISTS chat_message_inserted ON public.chat_messages;
CREATE TRIGGER chat_message_inserted
AFTER INSERT ON public.chat_messages
FOR EACH ROW
EXECUTE FUNCTION notify_chat_message();

-- 채팅 메시지 최대 갯수 제한 (각 이슈별 최근 100개만 표시)
CREATE OR REPLACE FUNCTION limit_chat_messages()
RETURNS TRIGGER AS $$
BEGIN
  DELETE FROM public.chat_messages
  WHERE issue_slug = NEW.issue_slug
  AND id NOT IN (
    SELECT id FROM public.chat_messages
    WHERE issue_slug = NEW.issue_slug
    ORDER BY created_at DESC
    LIMIT 100
  );
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- 트리거 생성
DROP TRIGGER IF EXISTS limit_chat_messages_trigger ON public.chat_messages;
CREATE TRIGGER limit_chat_messages_trigger
AFTER INSERT ON public.chat_messages
FOR EACH ROW
EXECUTE FUNCTION limit_chat_messages(); 